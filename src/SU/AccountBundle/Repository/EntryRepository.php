<?php

namespace SU\AccountBundle\Repository;

use SU\AccountBundle\Entity\Account;
use SU\AccountBundle\Entity\Category;
use SU\AccountBundle\Entity\Entry;
use SU\AccountBundle\Entity\History;

/**
 * EntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends \Doctrine\ORM\EntityRepository
{
	public function findThisMonthOperations($account) {
		$qb = $this->createQueryBuilder('e');
		$qb->leftjoin("e.category", "c");
		$qb->addSelect("c");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect("a");
		
		$qb->where("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime((new \DateTime())->format("Y-m")."-01"));
		$qb->setParameter("end", new \DateTime());
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->orderBy("e.paimentDate", "ASC");
		
		return $qb->getQuery()->getResult();
	}
	
	public function findFutureOperations($account) {
		$qb = $this->createQueryBuilder('e');
		$qb->leftjoin("e.category", "c");
		$qb->addSelect("c");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect("a");
		
		$qb->where("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime());
		$datetime =  new \DateTime((new \DateTime())->format("Y-m")."-01");
		$datetime->modify("+2 Year");
		$qb->setParameter("end", $datetime);
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->orderBy("e.paimentDate", "ASC");
		
		return $qb->getQuery()->getResult();
	}
	
	public function getOperationsByMonth($date, $account) {
		$qb = $this->createQueryBuilder("e");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect("a");
		
		$qb->where("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime($date->format("Y-m")."-01"));
		$datetime =  new \DateTime($date->format("Y-m")."-01");
		$datetime->modify("+1 Month");
		$datetime->modify("-1 Day");
		$qb->setParameter("end", $datetime);
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->orderBy("e.paimentDate", "ASC");
		
		return $qb->getQuery()->getResult();
	}
	
	public function getOutOperationsByCategory($category, $account, $date) {
		$qb = $this->createQueryBuilder("e");
		$qb->leftjoin("e.category", "c");
		$qb->addSelect("c");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect();
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->andWhere("c.name = :categoryName");
		$qb->setParameter("categoryName", $category->getName());
		
		$qb->andWhere("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime($date->format("Y-m")."-01"));
		$datetime =  new \DateTime($date->format("Y-m")."-01");
		$datetime->modify("+1 Month");
		$datetime->modify("-1 Day");
		$qb->setParameter("end", $datetime);
		
		$qb->andWhere("e.amount > 0");
		
		return $qb->getQuery()->getResult();
	}
	
	public function getInOperationsByCategory($category, $account, $date) {
		$qb = $this->createQueryBuilder("e");
		$qb->leftjoin("e.category", "c");
		$qb->addSelect("c");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect();
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->andWhere("c.name = :categoryName");
		$qb->setParameter("categoryName", $category->getName());
		
		$qb->andWhere("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime($date->format("Y-m")."-01"));
		$datetime =  new \DateTime($date->format("Y-m")."-01");
		$datetime->modify("+1 Month");
		$datetime->modify("-1 Day");
		$qb->setParameter("end", $datetime);
		
		$qb->andWhere("e.amount <= 0");
		
		return $qb->getQuery()->getResult();
	}
	
	public function getOperationsByCategory($category, $account, $date) {
		$qb = $this->createQueryBuilder("e");
		$qb->leftjoin("e.category", "c");
		$qb->addSelect("c");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect();
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->andWhere("c.name = :categoryName");
		$qb->setParameter("categoryName", $category->getName());
		
		$qb->andWhere("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime($date->format("Y-m")."-01"));
		$datetime =  new \DateTime($date->format("Y-m")."-01");
		$datetime->modify("+2 Year");
		$qb->setParameter("end", $datetime);
		
		$qb->orderBy("e.amount", "ASC");
		
		return $qb->getQuery()->getResult();
	}
	
	public function getSystematicOperationsByMonth(Account $account, \DateTime $date) {
		$qb = $this->createQueryBuilder("e");
		$qb->leftjoin("e.account", "a");
		$qb->addSelect();
		
		$qb->andWhere("a.id = :accountId");
		$qb->setParameter("accountId", $account->getId());
		
		$qb->andWhere("e.effective = :effective");
		$qb->setParameter("effective", "systematic");
		
		$qb->andWhere("e.paimentDate BETWEEN :start AND :end");
		$qb->setParameter("start", new \DateTime($date->format("Y-m")."-01"));
		$datetime =  new \DateTime($date->format("Y-m")."-01");
		$datetime->modify("+1 Month");
		$datetime->modify("-1 Day");
		$qb->setParameter("end", $datetime);
		
		return $qb->getQuery()->getResult();
	}
}
